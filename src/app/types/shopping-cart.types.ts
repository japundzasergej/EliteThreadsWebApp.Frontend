//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class AddUpdateProductToCartDTO implements IAddUpdateProductToCartDTO {
  productId?: number;
  userId?: string | undefined;
  selectedColor?: string | undefined;
  selectedSize?: number;
  quantity?: number;

  constructor(data?: IAddUpdateProductToCartDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.productId = _data['productId'];
      this.userId = _data['userId'];
      this.selectedColor = _data['selectedColor'];
      this.selectedSize = _data['selectedSize'];
      this.quantity = _data['quantity'];
    }
  }

  static fromJS(data: any): AddUpdateProductToCartDTO {
    data = typeof data === 'object' ? data : {};
    let result = new AddUpdateProductToCartDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['productId'] = this.productId;
    data['userId'] = this.userId;
    data['selectedColor'] = this.selectedColor;
    data['selectedSize'] = this.selectedSize;
    data['quantity'] = this.quantity;
    return data;
  }
}

export interface IAddUpdateProductToCartDTO {
  productId?: number;
  userId?: string | undefined;
  selectedColor?: string | undefined;
  selectedSize?: number;
  quantity?: number;
}

export class CartDTO implements ICartDTO {
  cartHeader?: CartHeaderDTO;
  cartDetails?: CartDetailDTO[] | undefined;

  constructor(data?: ICartDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.cartHeader = _data['cartHeader']
        ? CartHeaderDTO.fromJS(_data['cartHeader'])
        : <any>undefined;
      if (Array.isArray(_data['cartDetails'])) {
        this.cartDetails = [] as any;
        for (let item of _data['cartDetails'])
          this.cartDetails!.push(CartDetailDTO.fromJS(item));
      }
    }
  }

  static fromJS(data: any): CartDTO {
    data = typeof data === 'object' ? data : {};
    let result = new CartDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['cartHeader'] = this.cartHeader
      ? this.cartHeader.toJSON()
      : <any>undefined;
    if (Array.isArray(this.cartDetails)) {
      data['cartDetails'] = [];
      for (let item of this.cartDetails)
        data['cartDetails'].push(item.toJSON());
    }
    return data;
  }
}

export interface ICartDTO {
  cartHeader?: CartHeaderDTO;
  cartDetails?: CartDetailDTO[] | undefined;
}

export class CartDetailDTO implements ICartDetailDTO {
  cartDetailId?: number;
  cartHeaderId?: number;
  cartHeader?: CartHeaderDTO;
  productId?: number;
  product?: ProductDTO;
  quantity?: number;
  selectedColor?: string | undefined;
  selectedSize?: number;

  constructor(data?: ICartDetailDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.cartDetailId = _data['cartDetailId'];
      this.cartHeaderId = _data['cartHeaderId'];
      this.cartHeader = _data['cartHeader']
        ? CartHeaderDTO.fromJS(_data['cartHeader'])
        : <any>undefined;
      this.productId = _data['productId'];
      this.product = _data['product']
        ? ProductDTO.fromJS(_data['product'])
        : <any>undefined;
      this.quantity = _data['quantity'];
      this.selectedColor = _data['selectedColor'];
      this.selectedSize = _data['selectedSize'];
    }
  }

  static fromJS(data: any): CartDetailDTO {
    data = typeof data === 'object' ? data : {};
    let result = new CartDetailDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['cartDetailId'] = this.cartDetailId;
    data['cartHeaderId'] = this.cartHeaderId;
    data['cartHeader'] = this.cartHeader
      ? this.cartHeader.toJSON()
      : <any>undefined;
    data['productId'] = this.productId;
    data['product'] = this.product ? this.product.toJSON() : <any>undefined;
    data['quantity'] = this.quantity;
    data['selectedColor'] = this.selectedColor;
    data['selectedSize'] = this.selectedSize;
    return data;
  }
}

export interface ICartDetailDTO {
  cartDetailId?: number;
  cartHeaderId?: number;
  cartHeader?: CartHeaderDTO;
  productId?: number;
  product?: ProductDTO;
  quantity?: number;
  selectedColor?: string | undefined;
  selectedSize?: number;
}

export class CartHeaderDTO implements ICartHeaderDTO {
  cartHeaderId?: number;
  userId?: string | undefined;

  constructor(data?: ICartHeaderDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.cartHeaderId = _data['cartHeaderId'];
      this.userId = _data['userId'];
    }
  }

  static fromJS(data: any): CartHeaderDTO {
    data = typeof data === 'object' ? data : {};
    let result = new CartHeaderDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['cartHeaderId'] = this.cartHeaderId;
    data['userId'] = this.userId;
    return data;
  }
}

export interface ICartHeaderDTO {
  cartHeaderId?: number;
  userId?: string | undefined;
}

export class ProductDTO implements IProductDTO {
  productId?: number;
  productName?: string | undefined;
  image?: string | undefined;
  price?: number;
  priceAfterDiscount?: number | undefined;
  hasDiscount?: boolean;
  discountAmount?: number;

  constructor(data?: IProductDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.productId = _data['productId'];
      this.productName = _data['productName'];
      this.image = _data['image'];
      this.price = _data['price'];
      this.priceAfterDiscount = _data['priceAfterDiscount'];
      this.hasDiscount = _data['hasDiscount'];
      this.discountAmount = _data['discountAmount'];
    }
  }

  static fromJS(data: any): ProductDTO {
    data = typeof data === 'object' ? data : {};
    let result = new ProductDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['productId'] = this.productId;
    data['productName'] = this.productName;
    data['image'] = this.image;
    data['price'] = this.price;
    data['priceAfterDiscount'] = this.priceAfterDiscount;
    data['hasDiscount'] = this.hasDiscount;
    data['discountAmount'] = this.discountAmount;
    return data;
  }
}

export interface IProductDTO {
  productId?: number;
  productName?: string | undefined;
  image?: string | undefined;
  price?: number;
  priceAfterDiscount?: number | undefined;
  hasDiscount?: boolean;
  discountAmount?: number;
}

export class CheckoutDTO implements ICheckoutDTO {
  userId?: string | undefined;
  cartDTO?: CartDTO;
  totalPrice?: number;

  constructor(data?: ICheckoutDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.cartDTO = _data['cartDTO']
        ? CartDTO.fromJS(_data['cartDTO'])
        : <any>undefined;
      this.totalPrice = _data['totalPrice'];
    }
  }

  static fromJS(data: any): CheckoutDTO {
    data = typeof data === 'object' ? data : {};
    let result = new CheckoutDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['cartDTO'] = this.cartDTO ? this.cartDTO.toJSON() : <any>undefined;
    data['totalPrice'] = this.totalPrice;
    return data;
  }
}

export interface ICheckoutDTO {
  userId?: string | undefined;
  cartDTO?: CartDTO;
  totalPrice?: number;
}

export class OrderPlacedDTO implements IOrderPlacedDTO {
  orderId?: string | undefined;

  constructor(data?: IOrderPlacedDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.orderId = _data['orderId'];
    }
  }

  static fromJS(data: any): OrderPlacedDTO {
    data = typeof data === 'object' ? data : {};
    let result = new OrderPlacedDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['orderId'] = this.orderId;
    return data;
  }
}

export interface IOrderPlacedDTO {
  orderId?: string | undefined;
}
