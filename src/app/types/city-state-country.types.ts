//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class CityDTO implements ICityDTO {
  city_name?: string | undefined;

  constructor(data?: ICityDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.city_name = _data['city_name'];
    }
  }

  static fromJS(data: any): CityDTO {
    data = typeof data === 'object' ? data : {};
    let result = new CityDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['city_name'] = this.city_name;
    return data;
  }
}

export interface ICityDTO {
  city_name?: string | undefined;
}

export class CountryDTO implements ICountryDTO {
  countryName?: string | undefined;
  flag?: string | undefined;

  constructor(data?: ICountryDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.countryName = _data['countryName'];
      this.flag = _data['flag'];
    }
  }

  static fromJS(data: any): CountryDTO {
    data = typeof data === 'object' ? data : {};
    let result = new CountryDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['countryName'] = this.countryName;
    data['flag'] = this.flag;
    return data;
  }
}

export interface ICountryDTO {
  countryName?: string | undefined;
  flag?: string | undefined;
}
export class StateDTO implements IStateDTO {
  state_name?: string | undefined;

  constructor(data?: IStateDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.state_name = _data['state_name'];
    }
  }

  static fromJS(data: any): StateDTO {
    data = typeof data === 'object' ? data : {};
    let result = new StateDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['state_name'] = this.state_name;
    return data;
  }
}

export interface IStateDTO {
  state_name?: string | undefined;
}
