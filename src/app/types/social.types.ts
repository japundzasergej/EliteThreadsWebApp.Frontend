//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class CreateReviewsDTO implements ICreateReviewsDTO {
  userId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  createdDate?: Date;
  productId?: number;

  constructor(data?: ICreateReviewsDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.title = _data['title'];
      this.description = _data['description'];
      this.createdDate = _data['createdDate']
        ? new Date(_data['createdDate'].toString())
        : <any>undefined;
      this.productId = _data['productId'];
    }
  }

  static fromJS(data: any): CreateReviewsDTO {
    data = typeof data === 'object' ? data : {};
    let result = new CreateReviewsDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['title'] = this.title;
    data['description'] = this.description;
    data['createdDate'] = this.createdDate
      ? this.createdDate.toISOString()
      : <any>undefined;
    data['productId'] = this.productId;
    return data;
  }
}

export interface ICreateReviewsDTO {
  userId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  createdDate?: Date;
  productId?: number;
}

export class EditReviewDTO implements IEditReviewDTO {
  reviewId?: number;
  title?: string | undefined;
  description?: string | undefined;

  constructor(data?: IEditReviewDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.reviewId = _data['reviewId'];
      this.title = _data['title'];
      this.description = _data['description'];
    }
  }

  static fromJS(data: any): EditReviewDTO {
    data = typeof data === 'object' ? data : {};
    let result = new EditReviewDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['reviewId'] = this.reviewId;
    data['title'] = this.title;
    data['description'] = this.description;
    return data;
  }
}

export interface IEditReviewDTO {
  reviewId?: number;
  title?: string | undefined;
  description?: string | undefined;
}

export class ProductRatingDTO implements IProductRatingDTO {
  productId?: number;
  rating?: number;
  totalRatingCount?: number;
  totalRatingSum?: number;
  oneStarRating?: number;
  twoStarRating?: number;
  threeStarRating?: number;
  fourStarRating?: number;
  fiveStarRating?: number;

  constructor(data?: IProductRatingDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.productId = _data['productId'];
      this.rating = _data['rating'];
      this.totalRatingCount = _data['totalRatingCount'];
      this.totalRatingSum = _data['totalRatingSum'];
      this.oneStarRating = _data['oneStarRating'];
      this.twoStarRating = _data['twoStarRating'];
      this.threeStarRating = _data['threeStarRating'];
      this.fourStarRating = _data['fourStarRating'];
      this.fiveStarRating = _data['fiveStarRating'];
    }
  }

  static fromJS(data: any): ProductRatingDTO {
    data = typeof data === 'object' ? data : {};
    let result = new ProductRatingDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['productId'] = this.productId;
    data['rating'] = this.rating;
    data['totalRatingCount'] = this.totalRatingCount;
    data['totalRatingSum'] = this.totalRatingSum;
    data['oneStarRating'] = this.oneStarRating;
    data['twoStarRating'] = this.twoStarRating;
    data['threeStarRating'] = this.threeStarRating;
    data['fourStarRating'] = this.fourStarRating;
    data['fiveStarRating'] = this.fiveStarRating;
    return data;
  }
}

export interface IProductRatingDTO {
  productId?: number;
  rating?: number;
  totalRatingCount?: number;
  totalRatingSum?: number;
  oneStarRating?: number;
  twoStarRating?: number;
  threeStarRating?: number;
  fourStarRating?: number;
  fiveStarRating?: number;
}

export class ReviewsDTO implements IReviewsDTO {
  reviewId?: number;
  userId?: string | undefined;
  userName?: string | undefined;
  profilePicture?: string | undefined;
  isEdited?: boolean | undefined;
  title?: string | undefined;
  description?: string | undefined;
  createdDate?: Date;
  productId?: number;

  constructor(data?: IReviewsDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.reviewId = _data['reviewId'];
      this.userId = _data['userId'];
      this.userName = _data['userName'];
      this.title = _data['title'];
      this.description = _data['description'];
      this.createdDate = _data['createdDate']
        ? new Date(_data['createdDate'].toString())
        : <any>undefined;
      this.productId = _data['productId'];
    }
  }

  static fromJS(data: any): ReviewsDTO {
    data = typeof data === 'object' ? data : {};
    let result = new ReviewsDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['reviewId'] = this.reviewId;
    data['userId'] = this.userId;
    data['userName'] = this.userName;
    data['title'] = this.title;
    data['description'] = this.description;
    data['createdDate'] = this.createdDate
      ? this.createdDate.toISOString()
      : <any>undefined;
    data['productId'] = this.productId;
    return data;
  }
}

export interface IReviewsDTO {
  reviewId?: number;
  userId?: string | undefined;
  userName?: string | undefined;
  profilePicture?: string | undefined;
  isEdited?: boolean | undefined;
  title?: string | undefined;
  description?: string | undefined;
  createdDate?: Date;
  productId?: number;
}

export class UserDTO implements IUserDTO {
  picture?: string | undefined;
  userName?: string | undefined;
  userMetadata?: UserMetadata;

  constructor(data?: IUserDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.picture = _data['picture'];
      this.userName = _data['userName'];
      this.userMetadata = _data['userMetadata']
        ? UserMetadata.fromJS(_data['userMetadata'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): UserDTO {
    data = typeof data === 'object' ? data : {};
    let result = new UserDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['picture'] = this.picture;
    data['userName'] = this.userName;
    data['userMetadata'] = this.userMetadata
      ? this.userMetadata.toJSON()
      : <any>undefined;
    return data;
  }
}

export interface IUserDTO {
  picture?: string | undefined;
  userName?: string | undefined;
  userMetadata?: UserMetadata;
}

export class UpdatePasswordDTO implements IUpdatePasswordDTO {
  password?: string | undefined;

  constructor(data?: IUpdatePasswordDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.password = _data['password'];
    }
  }

  static fromJS(data: any): UpdatePasswordDTO {
    data = typeof data === 'object' ? data : {};
    let result = new UpdatePasswordDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['password'] = this.password;
    return data;
  }
}

export interface IUpdatePasswordDTO {
  password?: string | undefined;
}

export class UserMetadata implements IUserMetadata {
  firstName?: string | undefined;
  lastName?: string | undefined;
  country?: string | undefined;
  state?: string | undefined;
  city?: string | undefined;
  address?: string | undefined;

  constructor(data?: IUserMetadata) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.firstName = _data['firstName'];
      this.lastName = _data['lastName'];
      this.country = _data['country'];
      this.city = _data['city'];
      this.state = _data['state'];
      this.address = _data['address'];
    }
  }

  static fromJS(data: any): UserMetadata {
    data = typeof data === 'object' ? data : {};
    let result = new UserMetadata();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['firstName'] = this.firstName;
    data['lastName'] = this.lastName;
    data['country'] = this.country;
    data['city'] = this.city;
    data['state'] = this.state;
    data['address'] = this.address;
    return data;
  }
}

export interface IUserMetadata {
  firstName?: string | undefined;
  lastName?: string | undefined;
  country?: string | undefined;
  state?: string | undefined;
  city?: string | undefined;
  address?: string | undefined;
}

export class UserRatingDTO implements IUserRatingDTO {
  userId?: string | undefined;
  productId?: number;
  userInput?: number;

  constructor(data?: IUserRatingDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data['userId'];
      this.productId = _data['productId'];
      this.userInput = _data['userInput'];
    }
  }

  static fromJS(data: any): UserRatingDTO {
    data = typeof data === 'object' ? data : {};
    let result = new UserRatingDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userId'] = this.userId;
    data['productId'] = this.productId;
    data['userInput'] = this.userInput;
    return data;
  }
}

export interface IUserRatingDTO {
  userId?: string | undefined;
  productId?: number;
  userInput?: number;
}
