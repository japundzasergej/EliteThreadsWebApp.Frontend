//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class CategoriesDTO implements ICategoriesDTO {
  categoryId?: number;
  categoryName?: string | undefined;

  constructor(data?: ICategoriesDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.categoryId = _data['categoryId'];
      this.categoryName = _data['categoryName'];
    }
  }

  static fromJS(data: any): CategoriesDTO {
    data = typeof data === 'object' ? data : {};
    let result = new CategoriesDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['categoryId'] = this.categoryId;
    data['categoryName'] = this.categoryName;
    return data;
  }
}

export interface ICategoriesDTO {
  categoryId?: number;
  categoryName?: string | undefined;
}

export class CreateProductDTO implements ICreateProductDTO {
  productName?: string | undefined;
  productDescription?: string | undefined;
  imageList?: string[] | undefined;
  model?: string | undefined;
  compositions?: string | undefined;
  fabric?: string | undefined;
  pattern?: string | undefined;
  length?: string | undefined;
  color?: string[] | undefined;
  subcategoryId?: number;
  productsLeft?: number;
  price?: number;
  rating?: number;
  new?: boolean;
  mustHave?: boolean;
  size?: Size[] | undefined;

  constructor(data?: ICreateProductDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.productName = _data.description.productName;
      this.productDescription = _data.description.productDescription;
      this.price = _data.description.price;
      this.new = _data.description.new === 'true';
      this.mustHave = _data.description.mustHave === 'true';
      this.productsLeft = Number(_data.description.productsLeft);
      this.model = _data.info.model;
      this.compositions = _data.info.compositions;
      this.fabric = _data.info.fabric;
      this.pattern = _data.info.pattern;
      this.length = _data.info.length;

      this.subcategoryId = Number(_data.select.subcategoryId);

      if (Array.isArray(_data.checkbox.size)) {
        this.size = [] as any;
        for (let item of _data.checkbox.size) this.size!.push(item);
      }

      if (Array.isArray(_data.checkbox.color)) {
        this.color = [] as any;
        for (let item of _data.checkbox.color) this.color!.push(item);
      }

      if (Array.isArray(_data.images)) {
        this.imageList = [] as any;
        for (let item of _data.images) this.imageList!.push(item);
      }
    }
  }

  static fromJS(data: any): CreateProductDTO {
    data = typeof data === 'object' ? data : {};
    let result = new CreateProductDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['productName'] = this.productName;
    data['productDescription'] = this.productDescription;
    data['model'] = this.model;
    data['compositions'] = this.compositions;
    data['fabric'] = this.fabric;
    data['pattern'] = this.pattern;
    data['length'] = this.length;
    if (Array.isArray(this.imageList)) {
      data['imageList'] = [];
      for (let item of this.imageList) data['imageList'].push(item);
    }
    if (Array.isArray(this.color)) {
      data['color'] = [];
      for (let item of this.color) data['color'].push(item);
    }
    if (Array.isArray(this.size)) {
      data['size'] = [];
      for (let item of this.size) data['size'].push(item);
    }
    data['subcategoryId'] = this.subcategoryId;
    data['productsLeft'] = this.productsLeft;
    data['price'] = this.price;
    data['rating'] = this.rating;
    data['new'] = this.new;
    data['mustHave'] = this.mustHave;
    return data;
  }
}

export interface ICreateProductDTO {
  productName?: string | undefined;
  productDescription?: string | undefined;
  imagesList?: string[] | undefined;
  model?: string | undefined;
  compositions?: string | undefined;
  fabric?: string | undefined;
  pattern?: string | undefined;
  length?: string | undefined;
  color?: string[] | undefined;
  subcategoryId?: number;
  productsLeft?: number;
  price?: number;
  rating?: number;
  new?: boolean;
  mustHave?: boolean;
  size?: Size[] | undefined;
}

export class PaginatedListDTO implements IPaginatedListDTO {
  items?: ProductDTO[] | undefined;
  totalCount?: number;
  pageIndex?: number;
  totalPages?: number;
  pageSize?: number;
  readonly hasPreviousPage?: boolean;
  readonly hasNextPage?: boolean;

  constructor(data?: IPaginatedListDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['items'])) {
        this.items = [] as any;
        for (let item of _data['items'])
          this.items!.push(ProductDTO.fromJS(item));
      }
      this.totalCount = _data['totalCount'];
      this.pageIndex = _data['pageIndex'];
      this.totalPages = _data['totalPages'];
      this.pageSize = _data['pageSize'];
      (<any>this).hasPreviousPage = _data['hasPreviousPage'];
      (<any>this).hasNextPage = _data['hasNextPage'];
    }
  }

  static fromJS(data: any): PaginatedListDTO {
    data = typeof data === 'object' ? data : {};
    let result = new PaginatedListDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data['items'] = [];
      for (let item of this.items) data['items'].push(item.toJSON());
    }
    data['totalCount'] = this.totalCount;
    data['pageIndex'] = this.pageIndex;
    data['totalPages'] = this.totalPages;
    data['pageSize'] = this.pageSize;
    data['hasPreviousPage'] = this.hasPreviousPage;
    data['hasNextPage'] = this.hasNextPage;
    return data;
  }
}

export interface IPaginatedListDTO {
  items?: ProductDTO[] | undefined;
  totalCount?: number;
  pageIndex?: number;
  totalPages?: number;
  pageSize?: number;
  hasPreviousPage?: boolean;
  hasNextPage?: boolean;
}

export class EditProductDTO implements IEditProductDTO {
  productId: number = 0;
  productName?: string | undefined;
  productDescription?: string | undefined;
  imageList?: string[] | undefined;
  model?: string | undefined;
  compositions?: string | undefined;
  fabric?: string | undefined;
  pattern?: string | undefined;
  length?: string | undefined;
  color?: string[] | undefined;
  price?: number;
  productsLeft?: number;
  new?: boolean;
  mustHave?: boolean;
  size?: Size[];

  constructor(data?: IEditProductDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.productName = _data.string.productName;
      this.productDescription = _data.string.productDescription;
      this.model = _data.string.model;
      this.compositions = _data.string.compositions;
      this.fabric = _data.string.fabric;
      this.pattern = _data.string.pattern;
      this.length = _data.string.length;
      this.price = Number(_data.number.price);
      this.productsLeft = Number(_data.number.productsLeft);
      this.new = _data.select.new === 'true';
      this.mustHave = _data.select.mustHave === 'true';
      if (Array.isArray(_data.checkbox.size)) {
        this.size = [] as any;
        for (let item of _data.checkbox.size) this.size!.push(item);
      }

      if (Array.isArray(_data.checkbox.color)) {
        this.color = [] as any;
        for (let item of _data.checkbox.color) this.color!.push(item);
      }

      if (Array.isArray(_data.imageList)) {
        this.imageList = [] as any;
        for (let item of _data.imageList) this.imageList!.push(item);
      }
    }
  }

  static fromJS(data: any): EditProductDTO {
    data = typeof data === 'object' ? data : {};
    let result = new EditProductDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['productId'] = this.productId;
    data['productName'] = this.productName;
    data['productDescription'] = this.productDescription;
    data['model'] = this.model;
    data['compositions'] = this.compositions;
    data['fabric'] = this.fabric;
    data['pattern'] = this.pattern;
    data['length'] = this.length;
    data['price'] = this.price;
    data['new'] = this.new;
    data['mustHave'] = this.mustHave;
    data['productsLeft'] = this.productsLeft;
    if (Array.isArray(this.imageList)) {
      data['imageList'] = [];
      for (let item of this.imageList) data['imageList'].push(item);
    }
    if (Array.isArray(this.color)) {
      data['color'] = [];
      for (let item of this.color) data['color'].push(item);
    }
    if (Array.isArray(this.size)) {
      data['size'] = [];
      for (let item of this.size) data['size'].push(item);
    }
    return data;
  }
}

export interface IEditProductDTO {
  productId: number;
  productName?: string | undefined;
  productDescription?: string | undefined;
  imageList?: string[] | undefined;
  model?: string | undefined;
  compositions?: string | undefined;
  fabric?: string | undefined;
  pattern?: string | undefined;
  length?: string | undefined;
  color?: string[] | undefined;
  price?: number;
  productsLeft?: number;
  new?: boolean;
  mustHave?: boolean;
  size?: Size[];
}

export class ProductDTO implements IProductDTO {
  productId?: number;
  productName?: string | undefined;
  productDescription?: string | undefined;
  imageList?: string[] | undefined;
  model?: string | undefined;
  compositions?: string | undefined;
  fabric?: string | undefined;
  pattern?: string | undefined;
  length?: string | undefined;
  color?: string[] | undefined;
  subcategoryId?: number;
  subcategories?: SubcategoriesDTO;
  price?: number;
  rating?: number;
  totalRatingCount?: number;
  isInStock?: boolean;
  productsLeft?: number;
  hasDiscount?: boolean;
  discountId?: number | undefined;
  discountName?: string | undefined;
  discountAmount?: number | undefined;
  isInCollection?: boolean;
  collectionId?: number | undefined;
  collectionName?: string | undefined;
  new?: boolean;
  mustHave?: boolean;
  size?: Size[] | undefined;

  constructor(data?: IProductDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.productId = _data['productId'];
      this.productName = _data['productName'];
      this.productDescription = _data['productDescription'];
      if (Array.isArray(_data['imageList'])) {
        this.imageList = [] as any;
        for (let item of _data['imageList']) this.imageList!.push(item);
      }
      this.model = _data['model'];
      this.compositions = _data['compositions'];
      this.fabric = _data['fabric'];
      this.pattern = _data['pattern'];
      this.length = _data['length'];
      if (Array.isArray(_data['color'])) {
        this.color = [] as any;
        for (let item of _data['color']) this.color!.push(item);
      }
      this.subcategoryId = _data['subcategoryId'];
      this.subcategories = _data['subcategories']
        ? SubcategoriesDTO.fromJS(_data['subcategories'])
        : <any>undefined;
      this.price = _data['price'];
      this.rating = _data['rating'];
      this.totalRatingCount = _data['totalRatingCount'];
      this.isInStock = _data['isInStock'];
      this.productsLeft = _data['productsLeft'];
      this.hasDiscount = _data['hasDiscount'];
      this.discountId = _data['discountId'];
      this.discountName = _data['discountName'];
      this.discountAmount = _data['discountAmount'];
      this.isInCollection = _data['isInCollection'];
      this.collectionId = _data['collectionId'];
      this.collectionName = _data['collectionName'];
      this.new = _data['new'];
      this.mustHave = _data['mustHave'];
      if (Array.isArray(_data['size'])) {
        this.size = [] as any;
        for (let item of _data['size']) this.size!.push(item);
      }
    }
  }

  static fromJS(data: any): ProductDTO {
    data = typeof data === 'object' ? data : {};
    let result = new ProductDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['productId'] = this.productId;
    data['productName'] = this.productName;
    data['productDescription'] = this.productDescription;
    if (Array.isArray(this.imageList)) {
      data['imageList'] = [];
      for (let item of this.imageList) data['imageList'].push(item);
    }
    data['model'] = this.model;
    data['compositions'] = this.compositions;
    data['fabric'] = this.fabric;
    data['pattern'] = this.pattern;
    data['length'] = this.length;
    if (Array.isArray(this.color)) {
      data['color'] = [];
      for (let item of this.color) data['color'].push(item);
    }
    data['subcategoryId'] = this.subcategoryId;
    data['subcategories'] = this.subcategories
      ? this.subcategories.toJSON()
      : <any>undefined;
    data['price'] = this.price;
    data['rating'] = this.rating;
    data['totalRatingCount'] = this.totalRatingCount;
    data['isInStock'] = this.isInStock;
    data['productsLeft'] = this.productsLeft;
    data['hasDiscount'] = this.hasDiscount;
    data['discountId'] = this.discountId;
    data['discountName'] = this.discountName;
    data['discountAmount'] = this.discountAmount;
    data['isInCollection'] = this.isInCollection;
    data['collectionId'] = this.collectionId;
    data['collectionName'] = this.collectionName;
    data['new'] = this.new;
    data['mustHave'] = this.mustHave;
    if (Array.isArray(this.size)) {
      data['size'] = [];
      for (let item of this.size) data['size'].push(item);
    }
    return data;
  }
}

export interface IProductDTO {
  productId?: number;
  productName?: string | undefined;
  productDescription?: string | undefined;
  imageList?: string[] | undefined;
  model?: string | undefined;
  compositions?: string | undefined;
  fabric?: string | undefined;
  pattern?: string | undefined;
  length?: string | undefined;
  color?: string[] | undefined;
  subcategoryId?: number;
  subcategories?: SubcategoriesDTO;
  price?: number;
  rating?: number;
  totalRatingCount?: number;
  isInStock?: boolean;
  productsLeft?: number;
  hasDiscount?: boolean;
  discountId?: number | undefined;
  discountName?: string | undefined;
  discountAmount?: number | undefined;
  isInCollection?: boolean;
  collectionId?: number | undefined;
  collectionName?: string | undefined;
  new?: boolean;
  mustHave?: boolean;
  size?: Size[] | undefined;
}

export enum Size {
  S,
  M,
  L,
  XL,
  XXL,
  XXXL,
}

export class SubcategoriesDTO implements ISubcategoriesDTO {
  subcategoryId?: number;
  subcategoryName?: string | undefined;
  categoryId?: number;
  categories?: CategoriesDTO;

  constructor(data?: ISubcategoriesDTO) {
    if (data) {
      for (const property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.subcategoryId = _data['subcategoryId'];
      this.subcategoryName = _data['subcategoryName'];
      this.categoryId = _data['categoryId'];
      this.categories = _data['categories']
        ? CategoriesDTO.fromJS(_data['categories'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): SubcategoriesDTO {
    data = typeof data === 'object' ? data : {};
    let result = new SubcategoriesDTO();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['subcategoryId'] = this.subcategoryId;
    data['subcategoryName'] = this.subcategoryName;
    data['categoryId'] = this.categoryId;
    data['categories'] = this.categories
      ? this.categories.toJSON()
      : <any>undefined;
    return data;
  }
}

export interface ISubcategoriesDTO {
  subcategoryId?: number;
  subcategoryName?: string | undefined;
  categoryId?: number;
  categories?: CategoriesDTO;
}

export const Colors = [
  'Orange',
  'Yellow',
  'Red',
  'Pink',
  'Cream',
  'Grey',
  'Green',
  'Black',
  'Brown',
  'Beige',
  'White',
  'Blue',
] as const;
